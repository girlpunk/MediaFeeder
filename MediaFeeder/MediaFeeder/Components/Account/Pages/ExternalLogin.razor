@page "/Account/ExternalLogin"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using MediaFeeder.Data.db
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@attribute [IgnoreAntiforgeryToken]
@attribute [AllowAnonymous]

@inject SignInManager<AuthUser> SignInManager
@inject UserManager<AuthUser> UserManager
@inject IUserStore<AuthUser> UserStore
@inject IEmailSender<AuthUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<StatusMessage Message="@_message"/>
<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account.</h2>
<hr/>

<div class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="email"
                           placeholder="Please enter your email."/>
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    internal const string LoginCallbackAction = "LoginCallback";

    private string? _message;
    private ExternalLoginInfo? _externalLoginInfo;

    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set;  } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? ProviderDisplayName => _externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            ArgumentNullException.ThrowIfNull(HttpContext);
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
        }

        _externalLoginInfo = info;

        ArgumentNullException.ThrowIfNull(HttpContext);
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpContext);

        if (_externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            _externalLoginInfo.LoginProvider,
            _externalLoginInfo.ProviderKey,
            true,
            true);

        if (result.Succeeded)
        {
            var user = await UserManager.FindByLoginAsync(_externalLoginInfo.LoginProvider, _externalLoginInfo.ProviderKey);

            if (user != null)
            {
                await SignInManager.SignInAsync(user, true, _externalLoginInfo.LoginProvider);

                Logger.LogInformation(
                    "{Name} logged in with {LoginProvider} provider.",
                    _externalLoginInfo.Principal.Identity?.Name,
                    _externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (_externalLoginInfo.Principal.HasClaim(static c => c.Type == ClaimTypes.Email))
        {
            Input.Email = _externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }

        await OnValidSubmitAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpContext);

        if (_externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information during confirmation.", HttpContext);
        }

        var emailStore = GetEmailStore();
        var user = await UserManager.GetUserAsync(_externalLoginInfo.Principal);

        if (user == null)
        {
            user = CreateUser();

            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

            var result = await UserManager.CreateAsync(user);

            _message = $"Error creating user: {string.Join(",", result.Errors.Select(static error => error.Description))}";

            if (result != IdentityResult.Success)
                return;

            user = await UserManager.GetUserAsync(_externalLoginInfo.Principal) ?? throw new InvalidOperationException("Created user is null");
        }

        var result2 = await UserManager.AddLoginAsync(user, _externalLoginInfo);
        if (result2.Succeeded)
        {
            Logger.LogInformation("User created an account using {Name} provider.", _externalLoginInfo.LoginProvider);

            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            await SignInManager.SignInAsync(user, false, _externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }

        _message = $"Error adding login to user: {string.Join(",", result2.Errors.Select(static error => error.Description))}";
    }

    private static AuthUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<AuthUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(AuthUser)}'. " +
                                                $"Ensure that '{nameof(AuthUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<AuthUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<AuthUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }
}
