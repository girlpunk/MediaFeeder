// https://protobuf.dev/programming-guides/proto3/
syntax = "proto3";

option csharp_namespace = "MediaFeeder";
package MediaFeeder;

service API {
  rpc ListFolder (ListFolderRequest) returns (stream FolderReply) {}
  rpc Folder (FolderRequest) returns (FolderReply) {}
  rpc ListSubscription (ListSubscriptionRequest) returns (stream SubscriptionReply) {}
  rpc Subscription (SubscriptionRequest) returns (SubscriptionReply) {}
  rpc GetSubscriptionThumbnail (GetSubscriptionThumbnailRequest) returns (stream GetSubscriptionThumbnailReply) {}
  rpc Video (VideoRequest) returns (VideoReply) {}
  rpc StartDownload (DownloadRequest) returns (DownloadReply) {}
  rpc GetVideo (GetVideoRequest) returns (stream GetVideoReply) {}
  rpc GetVideoThumbnail (GetVideoThumbnailRequest) returns (stream GetVideoThumbnailReply) {}
  rpc Watched (WatchedRequest) returns (WatchedReply) {}
  rpc Search (SearchRequest) returns (SearchReply) {}
  rpc Shuffle (ShuffleRequest) returns (ShuffleReply) {}
  rpc PlaybackSession (stream PlaybackSessionRequest) returns (stream PlaybackSessionReply) {}
}

message ListFolderRequest {
  bool IncludeUnwatchedCounts = 2;
}

message FolderRequest {
  int32 Id = 1;

  bool IncludeUnwatchedCounts = 2;
}

message FolderReply {
  int32 Id = 1;
  string Name = 2;
  repeated int32 ChildFolders = 3;
  repeated int32 ChildSubscriptions = 4;
  UnwatchedCounts UnwatchedCounts = 5;
}

message ListSubscriptionRequest {
  bool IncludeUnwatchedCounts = 2;
}

message SubscriptionRequest {
  int32 Id = 1;
  bool IncludeUnwatchedCounts = 2;
}

message GetSubscriptionThumbnailReply {
  bytes Data = 1;
}

message GetSubscriptionThumbnailRequest {
  int32 Id = 1;
}

message SubscriptionReply {
  reserved 4; // Was Unwatched, now moved to sub-message

  int32 Id = 1;
  string Name = 2;
  UnwatchedCounts UnwatchedCounts = 3;
}

message VideoRequest {
  int32 Id = 1;
}

message VideoReply {
  int32 Id = 1;
  string Title = 2;
  string Description = 4;
  int32 Views = 5;
  optional int64 Published = 6;
  optional int32 Duration = 7;
  string VideoId = 8;

  bool New = 10;
  bool Downloaded = 11;
  bool Watched = 12;
}

message DownloadRequest {
  int32 Id = 1;
}

message GetVideoRequest {
  int32 Id = 1;
}

message GetVideoReply {
  bytes Data = 1;
}

message GetVideoThumbnailRequest {
  int32 Id = 1;
}

message GetVideoThumbnailReply {
  bytes Data = 1;
}

message DownloadReply {
  DownloadStatus Status = 1;
  // float Progress = 2;
  optional int32 ExitCode = 4;
}

enum DownloadStatus {
  STARTING = 0;
  IN_PROGRESS = 1;
  DONE = 2;
  TEMPORARY_ERROR = 3;
  PERMANENT_ERROR = 4;
}

message WatchedRequest {
  int32 Id = 1;
  bool Watched = 2;
}

message WatchedReply {
}

message SearchRequest {
  optional string Provider = 1;
  optional string ProviderVideoId = 2;
}
message SearchReply {
  repeated int32 VideoId = 1;
}

message ShuffleRequest {
  oneof target {
    int32 FolderId = 1;
    int32 SubscriptionId = 2;
  }
  optional int32 DurationMinutes = 3;
}

message ShuffleReply {
  repeated int32 Id = 1;
}

message PlaybackSessionRequest {
  optional int32 VideoId = 2;
  optional int32 Duration = 3;
  optional string Quality = 4;
  optional string Provider = 5;
  optional string State = 6;
  optional int32 Volume = 7;
  optional float  Rate = 8;
  optional float Loaded = 9;
  optional bool EndSession = 10;
}

message PlaybackSessionReply {
  optional bool ShouldPlayPause = 1;
  optional bool ShouldWatch = 2;
  optional bool ShouldSkip = 3;
}

message UnwatchedCounts {
  int32 UnwatchedDuration = 3;
  int32 UnwatchedCount = 4;
}
