// <auto-generated />
using System;
using MediaFeeder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediaFeeder.Data.Migrations
{
    [DbContext(typeof(MediaFeederDataContext))]
    [Migration("20251015215446_add_Star")]
    partial class add_Star
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaFeeder.Data.db.AuthGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "auth_group_name_a6ea08ec_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "auth_group_name_a6ea08ec_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Name" }, "auth_group_name_key")
                        .IsUnique();

                    b.ToTable("auth_group", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthGroupPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_group_permissions_group_id_b120cbf9");

                    b.HasIndex(new[] { "GroupId", "PermissionId" }, "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "PermissionId" }, "auth_group_permissions_permission_id_84c5c92e");

                    b.ToTable("auth_group_permissions", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("codename");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "auth_permission_content_type_id_2f476e4b");

                    b.HasIndex(new[] { "ContentTypeId", "Codename" }, "auth_permission_content_type_id_codename_01ab375a_uniq")
                        .IsUnique();

                    b.ToTable("auth_permission", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("AuthProviders");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_joined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_staff");

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "auth_user_username_6821ab7c_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Username" }, "auth_user_username_6821ab7c_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Username" }, "auth_user_username_key")
                        .IsUnique();

                    b.ToTable("auth_user", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_user_groups_group_id_97559544");

                    b.HasIndex(new[] { "UserId" }, "auth_user_groups_user_id_6a12ed8b");

                    b.HasIndex(new[] { "UserId", "GroupId" }, "auth_user_groups_user_id_group_id_94350c0c_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_groups", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUserUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermissionId" }, "auth_user_user_permissions_permission_id_1fbb5f2c");

                    b.HasIndex(new[] { "UserId" }, "auth_user_user_permissions_user_id_a95ead1b");

                    b.HasIndex(new[] { "UserId", "PermissionId" }, "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_user_permissions", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoAdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("ActionFlag")
                        .HasColumnType("smallint")
                        .HasColumnName("action_flag");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("action_time");

                    b.Property<string>("ChangeMessage")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("change_message");

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectRepr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("object_repr");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "django_admin_log_content_type_id_c4bce8eb");

                    b.HasIndex(new[] { "UserId" }, "django_admin_log_user_id_c564eba6");

                    b.ToTable("django_admin_log", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoCeleryResultsChordcounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_id");

                    b.Property<string>("SubTasks")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("sub_tasks");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "django_celery_results_chordcounter_group_id_1f70858c_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "GroupId" }, "django_celery_results_chordcounter_group_id_1f70858c_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "GroupId" }, "django_celery_results_chordcounter_group_id_key")
                        .IsUnique();

                    b.ToTable("django_celery_results_chordcounter", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoCeleryResultsGroupresult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentEncoding")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("content_encoding");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateDone")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_done");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateCreated" }, "django_cele_date_cr_bd6c1d_idx");

                    b.HasIndex(new[] { "DateDone" }, "django_cele_date_do_caae0e_idx");

                    b.HasIndex(new[] { "GroupId" }, "django_celery_results_groupresult_group_id_a085f1a9_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "GroupId" }, "django_celery_results_groupresult_group_id_a085f1a9_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "GroupId" }, "django_celery_results_groupresult_group_id_key")
                        .IsUnique();

                    b.ToTable("django_celery_results_groupresult", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoCeleryResultsTaskresult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentEncoding")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("content_encoding");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateDone")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_done");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TaskArgs")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("task_args");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("task_id");

                    b.Property<string>("TaskKwargs")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("task_kwargs");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("task_name");

                    b.Property<string>("Traceback")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("traceback");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("worker");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateCreated" }, "django_cele_date_cr_f04a50_idx");

                    b.HasIndex(new[] { "DateDone" }, "django_cele_date_do_f59aad_idx");

                    b.HasIndex(new[] { "Status" }, "django_cele_status_9b6201_idx");

                    b.HasIndex(new[] { "TaskName" }, "django_cele_task_na_08aec9_idx");

                    b.HasIndex(new[] { "Worker" }, "django_cele_worker_d54dd8_idx");

                    b.HasIndex(new[] { "TaskId" }, "django_celery_results_taskresult_task_id_de0d95bf_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "TaskId" }, "django_celery_results_taskresult_task_id_de0d95bf_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "TaskId" }, "django_celery_results_taskresult_task_id_key")
                        .IsUnique();

                    b.ToTable("django_celery_results_taskresult", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_label");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppLabel", "Model" }, "django_content_type_app_label_model_76bd3d3b_uniq")
                        .IsUnique();

                    b.ToTable("django_content_type", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoMigration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app");

                    b.Property<DateTime>("Applied")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("django_migrations", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoSession", b =>
                {
                    b.Property<string>("SessionKey")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("session_key");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date");

                    b.Property<string>("SessionData")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("session_data");

                    b.HasKey("SessionKey")
                        .HasName("django_session_pkey");

                    b.HasIndex(new[] { "ExpireDate" }, "django_session_expire_date_a5c62663");

                    b.HasIndex(new[] { "SessionKey" }, "django_session_session_key_c0390e0f_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "SessionKey" }, "django_session_session_key_c0390e0f_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("django_session", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DynamicPreferencesGlobalpreferencemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("RawValue")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("raw_value");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("section");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Section", "Name" }, "dynamic_preferences_glob_section_name_f4a2439b_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "dynamic_preferences_globalpreferencemodel_name_033debe0");

                    b.HasIndex(new[] { "Name" }, "dynamic_preferences_globalpreferencemodel_name_033debe0_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "dynamic_preferences_globalpreferencemodel_name_033debe0_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Section" }, "dynamic_preferences_globalpreferencemodel_section_c1ee9cc3");

                    b.HasIndex(new[] { "Section" }, "dynamic_preferences_globalpreferencemodel_section_c1ee9cc3_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Section" }, "dynamic_preferences_globalpreferencemodel_section_c1ee9cc3_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("dynamic_preferences_globalpreferencemodel", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DynamicPreferencesUsersUserpreferencemodel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("instance_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("RawValue")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("raw_value");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("section");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InstanceId", "Section", "Name" }, "dynamic_preferences_user_instance_id_section_name_29814e3f_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "dynamic_preferences_user_name_11ac488d_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "dynamic_preferences_user_name_11ac488d_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Section" }, "dynamic_preferences_user_section_ba869570_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Section" }, "dynamic_preferences_user_section_ba869570_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "InstanceId" }, "dynamic_preferences_users__instance_id_bf1d7718");

                    b.HasIndex(new[] { "Name" }, "dynamic_preferences_users_userpreferencemodel_name_11ac488d");

                    b.HasIndex(new[] { "Section" }, "dynamic_preferences_users_userpreferencemodel_section_ba869570");

                    b.ToTable("dynamic_preferences_users_userpreferencemodel", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("StorageHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("storage_hash");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "easy_thumbnails_source_name_5fe0edc6");

                    b.HasIndex(new[] { "Name" }, "easy_thumbnails_source_name_5fe0edc6_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "easy_thumbnails_source_name_5fe0edc6_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_source_storage_hash_946cbcc9");

                    b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_source_storage_hash_946cbcc9_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_source_storage_hash_946cbcc9_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "StorageHash", "Name" }, "easy_thumbnails_source_storage_hash_name_481ce32d_uniq")
                        .IsUnique();

                    b.ToTable("easy_thumbnails_source", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer")
                        .HasColumnName("source_id");

                    b.Property<string>("StorageHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("storage_hash");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StorageHash", "Name", "SourceId" }, "easy_thumbnails_thumbnai_storage_hash_name_source_fb375270_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "easy_thumbnails_thumbnail_name_b5882c31");

                    b.HasIndex(new[] { "Name" }, "easy_thumbnails_thumbnail_name_b5882c31_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "easy_thumbnails_thumbnail_name_b5882c31_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "SourceId" }, "easy_thumbnails_thumbnail_source_id_5b57bc77");

                    b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_thumbnail_storage_hash_f1435f49");

                    b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_thumbnail_storage_hash_f1435f49_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "StorageHash" }, "easy_thumbnails_thumbnail_storage_hash_f1435f49_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("easy_thumbnails_thumbnail", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsThumbnaildimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("ThumbnailId")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_id");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ThumbnailId" }, "easy_thumbnails_thumbnaildimensions_thumbnail_id_key")
                        .IsUnique();

                    b.ToTable("easy_thumbnails_thumbnaildimensions", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "YtManagerApp_subscriptionfolder_parent_id_bd5f4bc1");

                    b.HasIndex(new[] { "UserId" }, "YtManagerApp_subscriptionfolder_user_id_6fb12da0");

                    b.ToTable("YtManagerApp_subscriptionfolder", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.JobExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "YtManagerApp_jobexecution_user_id_60530e6f");

                    b.ToTable("YtManagerApp_jobexecution", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.JobMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("message");

                    b.Property<double?>("Progress")
                        .HasColumnType("double precision")
                        .HasColumnName("progress");

                    b.Property<bool>("SuppressNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("suppress_notification");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JobId" }, "YtManagerApp_jobmessage_job_id_ec6435ce");

                    b.ToTable("YtManagerApp_jobmessage", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDownload")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_download");

                    b.Property<bool>("AutomaticallyDeleteWatched")
                        .HasColumnType("boolean")
                        .HasColumnName("automatically_delete_watched");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("channel_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("DisableSync")
                        .HasColumnType("boolean");

                    b.Property<int?>("DownloadLimit")
                        .HasColumnType("integer")
                        .HasColumnName("download_limit");

                    b.Property<string>("DownloadOrder")
                        .HasColumnType("text")
                        .HasColumnName("download_order");

                    b.Property<DateTimeOffset?>("LastSynchronised")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synchronised");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_folder_id");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("playlist_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("provider");

                    b.Property<bool>("RewritePlaylistIndices")
                        .HasColumnType("boolean")
                        .HasColumnName("rewrite_playlist_indices");

                    b.Property<string>("Thumb")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("thumb");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("thumbnail");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentFolderId" }, "YtManagerApp_subscription_parent_folder_id_c4c64c21");

                    b.HasIndex(new[] { "UserId" }, "YtManagerApp_subscription_user_id_9d38617d");

                    b.ToTable("YtManagerApp_subscription", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DownloadError")
                        .HasColumnType("text");

                    b.Property<string>("DownloadedPath")
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("downloaded_path");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDownloaded")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasComputedColumnSql("downloaded_path IS NOT NULL", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("New")
                        .HasColumnType("boolean")
                        .HasColumnName("new");

                    b.Property<int?>("PlaylistIndex")
                        .HasColumnType("integer")
                        .HasColumnName("playlist_index");

                    b.Property<DateTimeOffset?>("PublishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publish_date");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<bool>("Star")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("StarDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Thumb")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("thumb");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(1000000000)
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<string>("UploaderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uploader_name");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("video_id");

                    b.Property<int?>("Views")
                        .HasColumnType("integer")
                        .HasColumnName("views");

                    b.Property<bool>("Watched")
                        .HasColumnType("boolean")
                        .HasColumnName("watched");

                    b.Property<DateTimeOffset?>("WatchedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("YtManagerApp_video_pkey");

                    b.HasIndex(new[] { "SubscriptionId" }, "YtManagerApp_video_subscription_id_720d4227");

                    b.HasIndex(new[] { "SubscriptionId", "IsDownloaded" }, "ytmanagerapp_video_subscription_id_downloaded");

                    b.ToTable("YtManagerApp_video", (string)null);
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthGroupPermission", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthGroup", "Group")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("auth_group_permissions_group_id_b120cbf9_fk_auth_group_id");

                    b.HasOne("MediaFeeder.Data.db.AuthPermission", "Permission")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("auth_group_permissio_permission_id_84c5c92e_fk_auth_perm");

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthPermission", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.DjangoContentType", "ContentType")
                        .WithMany("AuthPermissions")
                        .HasForeignKey("ContentTypeId")
                        .IsRequired()
                        .HasConstraintName("auth_permission_content_type_id_2f476e4b_fk_django_co");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthProvider", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("AuthProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUserGroup", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthGroup", "Group")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("auth_user_groups_group_id_97559544_fk_auth_group_id");

                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("auth_user_groups_user_id_6a12ed8b_fk_auth_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUserUserPermission", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthPermission", "Permission")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm");

                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoAdminLog", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.DjangoContentType", "ContentType")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("ContentTypeId")
                        .HasConstraintName("django_admin_log_content_type_id_c4bce8eb_fk_django_co");

                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("django_admin_log_user_id_c564eba6_fk_auth_user_id");

                    b.Navigation("ContentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DynamicPreferencesUsersUserpreferencemodel", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthUser", "Instance")
                        .WithMany("DynamicPreferencesUsersUserpreferencemodels")
                        .HasForeignKey("InstanceId")
                        .IsRequired()
                        .HasConstraintName("dynamic_preferences__instance_id_bf1d7718_fk_auth_user");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsThumbnail", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.EasyThumbnailsSource", "Source")
                        .WithMany("EasyThumbnailsThumbnails")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("easy_thumbnails_thum_source_id_5b57bc77_fk_easy_thum");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsThumbnaildimension", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.EasyThumbnailsThumbnail", "Thumbnail")
                        .WithOne("EasyThumbnailsThumbnaildimension")
                        .HasForeignKey("MediaFeeder.Data.db.EasyThumbnailsThumbnaildimension", "ThumbnailId")
                        .IsRequired()
                        .HasConstraintName("easy_thumbnails_thum_thumbnail_id_c3a0c549_fk_easy_thum");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Folder", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.Folder", "Parent")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("YtManagerApp_subscri_parent_id_bd5f4bc1_fk_YtManager");

                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("YtManagerApp_subscri_user_id_6fb12da0_fk_auth_user");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.JobExecution", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("JobExecutions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("YtManagerApp_jobexecution_user_id_60530e6f_fk_auth_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.JobMessage", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.JobExecution", "Job")
                        .WithMany("Jobmessages")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("YtManagerApp_jobmess_job_id_ec6435ce_fk_YtManager");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Subscription", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.Folder", "ParentFolder")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("YtManagerApp_subscri_parent_folder_id_c4c64c21_fk_YtManager");

                    b.HasOne("MediaFeeder.Data.db.AuthUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("YtManagerApp_subscription_user_id_9d38617d_fk_auth_user_id");

                    b.Navigation("ParentFolder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Video", b =>
                {
                    b.HasOne("MediaFeeder.Data.db.Subscription", "Subscription")
                        .WithMany("Videos")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("YtManagerApp_video_subscription_id_720d4227_fk_YtManager");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthGroup", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserGroups");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthPermission", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserUserPermissions");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.AuthUser", b =>
                {
                    b.Navigation("AuthProviders");

                    b.Navigation("AuthUserGroups");

                    b.Navigation("AuthUserUserPermissions");

                    b.Navigation("DjangoAdminLogs");

                    b.Navigation("DynamicPreferencesUsersUserpreferencemodels");

                    b.Navigation("Folders");

                    b.Navigation("JobExecutions");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.DjangoContentType", b =>
                {
                    b.Navigation("AuthPermissions");

                    b.Navigation("DjangoAdminLogs");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsSource", b =>
                {
                    b.Navigation("EasyThumbnailsThumbnails");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.EasyThumbnailsThumbnail", b =>
                {
                    b.Navigation("EasyThumbnailsThumbnaildimension");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Folder", b =>
                {
                    b.Navigation("Subfolders");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.JobExecution", b =>
                {
                    b.Navigation("Jobmessages");
                });

            modelBuilder.Entity("MediaFeeder.Data.db.Subscription", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
