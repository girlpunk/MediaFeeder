@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager _navigationManager


<PageTitle>@Title - MediaFeeder</PageTitle>

<CascadingValue Value="this">
    <AuthorizeView>
        <Authorized>
            <div style="display: flex; justify-content: center;">
                <rux-global-status-bar
                    include-icon="true"
                    app-state="Production"
                    app-state-color="tag1"
                    username="@context.User.Identity?.Name"
                    app-domain="MediaFeeder"
                    app-name="@Title"
                    app-version="4.0 Alpha"
                    menu-icon="apps">
                    <rux-clock></rux-clock>
                    <rux-button slot="right-side">Emergency shut off</rux-button>
                </rux-global-status-bar>
            </div>
        </Authorized>
    </AuthorizeView>
    <MudLayout>
        <MudDrawer Open="@ShowSidebar" ClipMode="DrawerClipMode.Always" Elevation="2">
            <AuthorizeView>
                <Authorized>
                    <NavMenu/>
                </Authorized>
                <NotAuthorized>
                    <a href="Identity/Account/Login">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code{

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={Uri.EscapeDataString(_navigationManager.ToBaseRelativePath(_navigationManager.Uri))}");
        }
    }

    private string _title = "MediaFeeder";

    public string Title
    {
        get => _title;
        set {
            _title = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private bool _showSidebar = true;

    public bool ShowSidebar
    {
        get => _showSidebar;
        set
        {
            _showSidebar = value;
            InvokeAsync(StateHasChanged);
        }
    }
}
